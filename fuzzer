#!/bin/bash

# Default curl options
curl_options="-sw '\n%{http_code} %{size_download} %{time_total} %{size_header} %{size_request} %{url_effective}' -o /dev/null"

# Function to display the help message
display_help() {
    echo -e "\033[1;35m+-------------------------------------------------------+\033[0m"
    echo -e "\033[1;35m|               \033[1;36mFUZZER created by Aexon\033[1;35m                 |\033[0m"
    echo -e "\033[1;35m+-------------------------------------------------------+\033[0m"
    echo
    echo "Usage: $0 [-u <URL> | -l <url_list_file>] -w <payload_file> [-f status_code1,status_code2,...] [-p <proxy>] [-o <output_format>] [-h]"
    echo
    echo "Options:"
    echo "  -u <URL>              The target URL with the 'FUZZ' parameter to be replaced by payloads."
    echo "  -l <url_list_file>    The file containing a list of target URLs with the 'FUZZ' parameter."
    echo "  -w <payload_file>     The file containing payloads, each on a new line."
    echo "  -f <status_codes>     Comma-separated list of status codes to filter results."
    echo "  -p <proxy>            Specify a proxy to use for the requests."
    echo "  -o <output_format>    Specify the output format: original, json, html."
    echo "  -h                    Display this help message and exit."
    echo
    echo "Please don't forget to bring Cookies for me"
    echo "Join the community of Fuzzer to contribute "
    echo
    exit 0
}

# Function to perform fuzzing on a URL
perform_fuzzing() {
    local url="$1" payload="$2" filters="$3" proxy="$4" output_format="$5" method="$6"
    local modified_url response status_code response_length response_time
    modified_url=$(echo "$url" | sed "s/FUZZ/$payload/")
    response=$(curl -X "$method" $curl_options $proxy "$modified_url")
    status_code=$(echo "$response" | tail -n1 | awk '{print $1}')
    
    case "$status_code" in
    *) status_code_color="$status_code" ;;  # Bold for all status codes
esac

    if [ -z "$filters" ] || [[ ",$filters," == *",$status_code,"* ]]; then
        case "$output_format" in
            json)
                printf '{"payload":"%s","status_code":"%s","method":"%s","url":"%s"}\n' "$payload" "$status_code" "$method" "$modified_url"
                ;;
            html)
                printf "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>\n" "$payload" "$status_code" "$method" "$modified_url"
                ;;
            *)
                printf "| %-15s | %-15s | %-15s | %-15s 		   \n" "$payload" "$status_code_color" "$method" "$modified_url"
                ;;
        esac
    fi
}

# Default values
method="GET"
output_format="original"

# Parse arguments
while getopts ":u:l:w:f:p:o:m:h" opt; do
    case $opt in
        u) url="$OPTARG" ;;
        l) url_list_file="$OPTARG" ;;
        w) payload_file="$OPTARG" ;;
        f) filters="$OPTARG" ;;
        p) proxy="-x $OPTARG" ;;
        o) output_format="$OPTARG" ;;
        m) method="$OPTARG" ;;
        h) display_help ;;
        \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
        :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
    esac
done

# Validate input
[ -z "$url" ] && [ -z "$url_list_file" ] || [ -z "$payload_file" ] && display_help
[ -n "$url" ] && [ -n "$url_list_file" ] && echo "Specify either a single URL (-u) or a list of URLs (-l), not both." && exit 1

# Read payloads
mapfile -t payload_array < "$payload_file"

# Header
case "$output_format" in
    html)
        echo "<table><tr><th>Payload</th><th>Status Code</th><th>Request Method</th><th>URL</th></tr>"
        ;;
    *)
        echo "*-----------------*-----------------*-----------------*------------------------------------------------------------*"
        echo "|      Payload    |    Status Code  |  Request Method |                           URL                              |"
        echo "*-----------------*-----------------*-----------------*------------------------------------------------------------*"
        ;;
esac

# Fuzzing
if [ -n "$url" ]; then
    for payload in "${payload_array[@]}"; do
        perform_fuzzing "$url" "$payload" "$filters" "$proxy" "$output_format" "$method"
    done
fi

if [ -n "$url_list_file" ]; then
    while IFS= read -r url; do
        [[ -n "$url" && ! "$url" =~ ^#.* ]] && for payload in "${payload_array[@]}"; do
            perform_fuzzing "$url" "$payload" "$filters" "$proxy" "$output_format" "$method"
        done
    done < "$url_list_file"
fi

# Footer
[ "$output_format" == "html" ] && echo "</table>" || echo "*-----------------*-----------------*-----------------*------------------------------------------------------------*"
